{"version":3,"file":"nonogram.min.js","mappings":"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EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,GAAI,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,IAAK,CAAC,EAAG,EAAG,EAAG,EAAG,IAAK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,CAAC,EAAG,EAAG,EAAG,EAAG,IAAK,CAAC,EAAG,GAAI,IAAK,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,KAEnkBL,IAAQ,CACP,CAAC,GAAI,IAAK,CAAC,EAAG,EAAG,EAAG,IAAK,CAAC,EAAG,EAAG,EAAG,EAAG,IAAK,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,CAAC,EAAG,EAAG,GAAI,GAAI,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EA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","sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./src/utility.js","webpack:///./src/puzzle.js","webpack:///./src/puzzle-cell.js","webpack:///./src/puzzle-line.js","webpack:///./src/solver.js","webpack:///./src/creator.js","webpack:///./src/gui-template.js","webpack:///./src/puzzle-library.js","webpack:///./src/gui.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Nonogram\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Nonogram\"] = factory();\n\telse\n\t\troot[\"Nonogram\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export {Utility};\n\n\n/**\n * @class\n * @type {Utility}\n * @this Utility\n */\nconst Utility = class\n{\n\t/**\n\t *\n\t * @param array\n\t * @param value\n\t * @returns {array}\n\t */\n\tstatic removeFromArray( array, value )\n\t{\n\t\tconst index = array.indexOf( value );\n\n\t\tif (index !== -1) {\n\t\t\tarray.splice( index, 1 );\n\t\t}\n\n\t\treturn array;\n\t}\n\n\n\t/**\n\t *\n\t * @param length\n\t * @returns {array}\n\t */\n\tstatic getZeroFilledArray( length )\n\t{\n\t\treturn new Array( length ).fill( 0 );\n\t}\n\n\n\t/**\n\t *\n\t * @param array\n\t * @returns {array}\n\t */\n\tstatic cloneArray( array )\n\t{\n\t\treturn array.slice( 0 );\n\t}\n\n\n\t/**\n\t *\n\t * @param min\n\t * @param max\n\t * @returns {number}\n\t */\n\tstatic getRandomIntBetween( min, max )\n\t{\n\t\tlet minCeil  = Math.ceil( min ),\n\t\t\tmaxFloor = Math.floor( max )\n\t\t;\n\n\t\treturn Math.floor( Math.random() * (maxFloor - minCeil + 1) ) + minCeil;\n\t}\n\n};\n\n\n","import {Utility} from '../src/utility.js';\n\n\nexport {Puzzle};\n\n/**\n * @class\n * @type {Puzzle}\n * @this Puzzle\n *\n * the main puzzle class containing the grid of cells, row/column hints, etc.\n *\n * @property {number} width\n * @property {number} height\n * @property {number} totalCells\n * @property {array} cells\n * @property {array} rowHints\n * @property {array} columnHints\n * @property {Creator|null} creator\n * @property {array} grid - a multi-dimensional array representing rows and columns.\n *                   for example a 2x2 grid could be represented by [[0,1],[0,0]]\n */\nconst Puzzle = class\n{\n\t/**\n\t * @param {number} width - an integer >= 1 specifying the number of rows\n\t * @param {number} height - an integer >= 1 specifying the number of columns\n\t * @throws - error if width or height are invalid\n\t */\n\tconstructor( width, height )\n\t{\n\t\tif (typeof width === 'undefined' || typeof height === 'undefined') {\n\n\t\t\tthrow('width and height are required constructor parameters.');\n\n\t\t} else if ((width <= 0 || height <= 0) || (width === 1 && height === 1)) {\n\n\t\t\tthrow('invalid dimensions: ' + width.toString() + ' x ' + height.toString());\n\t\t}\n\n\t\tthis.width      = typeof width === 'number' ? width : parseInt( width.toString(), 10 );\n\t\tthis.height     = typeof height === 'number' ? height : parseInt( height.toString(), 10 );\n\t\tthis.totalCells = this.width * this.height;\n\n\t\tthis.reset();\n\t}\n\n\n\t/**\n\t * empty all arrays and create zero-filled multidimensional grid array\n\t */\n\treset()\n\t{\n\t\tconst zeroFill = Utility.getZeroFilledArray;\n\n\t\tthis.creator     = null;\n\t\tthis.cells       = [];\n\t\tthis.rowHints    = [];\n\t\tthis.columnHints = [];\n\t\tthis.grid        = zeroFill( this.height ).map( () =>\n\t\t{\n\t\t\treturn zeroFill( this.width );\n\t\t} );\n\t}\n\n\n\t/**\n\t * @returns {boolean}\n\t */\n\tcheckUserSolution()\n\t{\n\t\treturn this.cells.every( ( cell ) =>\n\t\t{\n\t\t\t// cell.solution will be 0 or 1, but cell.userSolution might be null, 0 or 1\n\t\t\tconst userValue = cell.userSolution === 1 ? 1 : 0;\n\n\t\t\treturn cell.solution === userValue;\n\t\t} );\n\t}\n\n\n\t/**\n\t * @param {number} row\n\t * @returns {array|boolean}\n\t */\n\tgetRowCells( row )\n\t{\n\t\tconst cells = [];\n\t\tlet start   = row * this.width,\n\t\t\tend     = start + this.width,\n\t\t\ti\n\t\t;\n\n\t\tfor (i = start; i < end; i++) {\n\t\t\tcells.push( this.cells[i] );\n\t\t}\n\n\t\treturn cells.length > 0 ? cells : false;\n\t}\n\n\n\t/**\n\t * @param {number} column\n\t * @returns {array|boolean}\n\t */\n\tgetColumnCells( column )\n\t{\n\t\tconst cells = [];\n\t\tlet i;\n\n\t\tfor (i = column; i < this.cells.length; i += this.width) {\n\t\t\tcells.push( this.cells[i] );\n\t\t}\n\n\t\treturn cells.length > 0 ? cells : false;\n\t}\n\n\n\t/**\n\t * @param {number|string} index\n\t * @returns {object|boolean}\n\t */\n\tgetCellByIndex( index )\n\t{\n\t\tconst indexInt = typeof index !== 'number' ? parseInt( index, 10 ) : index;\n\n\t\treturn this.cells[indexInt] ? this.cells[indexInt] : false;\n\t}\n\n};\n\n","export {PuzzleCell};\n\n\n/**\n * @class\n * @type {PuzzleCell}\n * @this PuzzleCell\n *\n * a container representing a single cell in the puzzle grid\n *\n * @property {number} index\n * @property {number} column\n * @property {number} row\n * @property {*} solution - null, 0, or 1\n * @property {*} userSolution - null, 0, or 1\n * @property {*} aiSolution - null, 0, or 1\n */\nconst PuzzleCell = class\n{\n\tconstructor( params )\n\t{\n\t\tthis.index        = -1;\n\t\tthis.column       = -1;\n\t\tthis.row          = -1;\n\t\tthis.solution     = null;\n\t\tthis.userSolution = null;\n\t\tthis.aiSolution   = null;\n\n\t\tObject.assign( this, params );\n\t}\n};\n\n","export {PuzzleLine};\n\n\n/**\n * @class\n * @type {PuzzleLine}\n * @this PuzzleLine\n *\n * a container representing a complete row or column of grid cells\n *\n * @property {string} type - either 'row' or 'column'\n * @property {number} index - the column or row index\n * @property {number} length\n * @property {number} minimumSectionLength\n * @property {array} sections\n * @property {array} cells\n * @property {boolean} solved\n */\nconst PuzzleLine = class\n{\n\tconstructor( params )\n\t{\n\t\tthis.type                 = '';\n\t\tthis.index                = -1;\n\t\tthis.length               = 0;\n\t\tthis.minimumSectionLength = 0;\n\t\tthis.sections             = [];\n\t\tthis.cells                = [];\n\t\tthis.solved               = false;\n\n\t\tObject.assign( this, params );\n\t}\n};\n\n\n\n\n","import {PuzzleLine} from '../src/puzzle-line.js';\nimport {Utility} from '../src/utility.js';\n\n\nexport {Solver};\n\n/**\n * @class\n * @type {Solver}\n * @this Solver\n *\n * a class that solves nonogram puzzles using logical techniques a human might use\n *\n * @property {Puzzle} puzzle\n * @property {number} elapsedTime\n * @property {boolean} isReset\n * @property {array} lines\n * @property {array} solutionLog\n */\nconst Solver = class\n{\n\n\t/**\n\t * @param {Puzzle} puzzle\n\t */\n\tconstructor( puzzle )\n\t{\n\t\tthis.puzzle = puzzle;\n\n\t\tthis._reset();\n\t}\n\n\n\t/**\n\t *\n\t * @returns {boolean}\n\t */\n\tsolve()\n\t{\n\t\tconst start      = new Date().getTime();\n\t\tlet lastProgress = -1,\n\t\t\tpass         = 1,\n\t\t\tsolved, passStart, passEnd, end, passElapsedTime, totalElapsedTime, lineKey, line\n\t\t;\n\n\t\tif (!this.isReset) {\n\t\t\tthis._reset();\n\t\t}\n\n\t\tthis.isReset = false;\n\t\tthis._log( 'Starting solve algorithm', 'info' );\n\n\n\t\twhile (this._getProgress() > lastProgress && this._getTotalSolved() < this.puzzle.cells.length) {\n\n\t\t\tpassStart    = new Date().getTime();\n\t\t\tlastProgress = this._getProgress();\n\n\t\t\tfor (lineKey = 0; lineKey < this.lines.length; lineKey++) {\n\n\t\t\t\tline = this.lines[lineKey];\n\n\t\t\t\tif (!line.solved) {\n\t\t\t\t\tthis.eliminateImpossibleFits( line );\n\t\t\t\t}\n\t\t\t\tif (!line.solved) {\n\t\t\t\t\tthis.findKnownPositivesAndNegatives( line );\n\t\t\t\t}\n\t\t\t\tif (!line.solved) {\n\t\t\t\t\tthis.findSectionDefiningChains( line );\n\t\t\t\t}\n\t\t\t\tif (!line.solved) {\n\t\t\t\t\tthis.findAnchoredSections( line );\n\t\t\t\t}\n\t\t\t\tif (!line.solved) {\n\t\t\t\t\tthis.findCompletedSections( line );\n\t\t\t\t}\n\t\t\t\tif (!line.solved) {\n\t\t\t\t\tthis.findCompletedLines( line );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpassEnd         = new Date().getTime();\n\t\t\tpassElapsedTime = (passEnd - passStart) / 1000;\n\n\t\t\tthis._log( 'Pass ' + pass + ' completed in ' + passElapsedTime + ' seconds :: '\n\t\t\t\t+ this._getTotalSolved() + '/' + this.puzzle.cells.length + ' cells solved', 'info'\n\t\t\t);\n\t\t\tpass++;\n\t\t}\n\n\t\tsolved           = this._getTotalSolved() === this.puzzle.cells.length;\n\t\tend              = new Date().getTime();\n\t\ttotalElapsedTime = (end - start) / 1000;\n\n\t\tthis._log( 'Solve algorithm finished in ' + totalElapsedTime + ' seconds.', 'info' );\n\n\t\tif (solved) {\n\t\t\tthis._log( 'Solution Found.', 'success' );\n\t\t} else {\n\t\t\tthis._log( 'Could not find solution.', 'failure' );\n\t\t}\n\n\t\tthis.elapsedTime = totalElapsedTime;\n\n\t\treturn solved;\n\t}\n\n\n\t//\t#############################################################################################\tsolution algorithms\n\n\t/**\n\t *\n\t * @param {PuzzleLine} line\n\t */\n\teliminateImpossibleFits( line )\n\t{\n\t\tlet minimumStartIndex = 0,\n\t\t\tmaximumStartIndex = line.length - line.minimumSectionLength,\n\t\t\ti, section, possibleStartIndex, newPossibleStartIndexes, lineSectionKey, startIndexKey, testCell, end,\n\t\t\tlineCellKey, lineKey\n\t\t;\n\n\n\t\t// no sections\n\n\t\tif (line.sections.length === 0) {\n\n\t\t\tfor (lineCellKey = 0; lineCellKey < line.cells.length; lineCellKey++) {\n\t\t\t\tthis._setCellSolution( line.cells[lineCellKey], 0 );\n\t\t\t}\n\t\t}\n\n\t\t// tighten range if one or more known negative cells start the line\n\n\t\tfor (lineKey = 0; lineKey < line.length; lineKey++) {\n\n\t\t\tif (line.cells[lineKey].aiSolution === 0) {\n\t\t\t\tminimumStartIndex++;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// tighten range if one or more known negative cells end the line\n\n\t\tfor (lineKey = line.length - 1; lineKey >= 0; lineKey--) {\n\t\t\tif (line.cells[lineKey].aiSolution === 0) {\n\t\t\t\tmaximumStartIndex--;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\n\t\tfor (lineSectionKey = 0; lineSectionKey < line.sections.length; lineSectionKey++) {\n\n\t\t\tsection                 = line.sections[lineSectionKey];\n\t\t\tnewPossibleStartIndexes = Utility.cloneArray( section.possibleStartIndexes );\n\n\t\t\t// eliminate places where section does not fit\n\n\t\t\tfor (startIndexKey = 0; startIndexKey < section.possibleStartIndexes.length; startIndexKey++) {\n\n\t\t\t\tpossibleStartIndex = section.possibleStartIndexes[startIndexKey];\n\n\t\t\t\ttestCell = line.cells[possibleStartIndex + section.length];\n\n\t\t\t\t// the total length of all sections including minimum gap(s) of one cell does not allow this section to fit:\n\n\t\t\t\tif (possibleStartIndex < minimumStartIndex || possibleStartIndex > maximumStartIndex) {\n\t\t\t\t\tnewPossibleStartIndexes = Utility.removeFromArray( newPossibleStartIndexes, possibleStartIndex );\n\t\t\t\t}\n\n\t\t\t\t// there is a known positive cell immediately following the possible section placement, so section cannot start here\n\n\t\t\t\tif (testCell && testCell.aiSolution === 1) {\n\t\t\t\t\tnewPossibleStartIndexes = Utility.removeFromArray( newPossibleStartIndexes, possibleStartIndex );\n\t\t\t\t}\n\n\t\t\t\t// there is a known impossible cell in this range, so section cannot fit here:\n\n\t\t\t\tend = possibleStartIndex + section.length - 1;\n\t\t\t\tend = (end > line.length - 1) ? line.length - 1 : end;\n\n\t\t\t\tfor (i = possibleStartIndex; i <= end; i++) {\n\t\t\t\t\tif (i > line.length - 1 || line.cells[i].aiSolution === 0) {\n\t\t\t\t\t\tnewPossibleStartIndexes = Utility.removeFromArray( newPossibleStartIndexes, possibleStartIndex );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tminimumStartIndex += section.length + 1;\n\t\t\tmaximumStartIndex += section.length + 1;\n\n\t\t\tsection.possibleStartIndexes = newPossibleStartIndexes;\n\t\t}\n\t}\n\n\n\t/**\n\t *\n\t * @param {PuzzleLine} line\n\t */\n\tfindKnownPositivesAndNegatives( line )\n\t{\n\t\tconst totalCellCounts = Utility.getZeroFilledArray( line.length );\n\t\tlet sectionKey, section, cellCounts, startIndexKey, possibleStartIndex, start, end, i, cellCountKey, cellCount,\n\t\t\tcell;\n\n\t\tfor (sectionKey = 0; sectionKey < line.sections.length; sectionKey++) {\n\n\t\t\tsection    = line.sections[sectionKey];\n\t\t\tcellCounts = Utility.getZeroFilledArray( line.length );\n\n\t\t\t// keep two counts: 1) all common cells for this section, and 2) cells where no section can be\n\n\t\t\tfor (startIndexKey = 0; startIndexKey < section.possibleStartIndexes.length; startIndexKey++) {\n\n\t\t\t\tpossibleStartIndex = section.possibleStartIndexes[startIndexKey];\n\t\t\t\tstart              = possibleStartIndex;\n\t\t\t\tend                = start + section.length - 1;\n\n\t\t\t\tfor (i = start; i <= end; i++) {\n\t\t\t\t\tcellCounts[i]++;\n\t\t\t\t\ttotalCellCounts[i]++;\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\t// common to all possibilities, solve as positive\n\n\t\t\tfor (cellCountKey = 0; cellCountKey < cellCounts.length; cellCountKey++) {\n\n\t\t\t\tcellCount = cellCounts[cellCountKey];\n\t\t\t\tcell      = line.cells[cellCountKey];\n\n\t\t\t\tif (cell && cell.aiSolution === null && cellCount === section.possibleStartIndexes.length) {\n\t\t\t\t\tthis._setCellSolution( cell, 1 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// no possible cells, remove as a possibility\n\n\t\tfor (cellCountKey = 0; cellCountKey < totalCellCounts.length; cellCountKey++) {\n\n\t\t\tcellCount = totalCellCounts[cellCountKey];\n\t\t\tcell      = line.cells[cellCountKey];\n\n\t\t\tif (cell && cell.aiSolution === null && cellCount === 0) {\n\t\t\t\tthis._setCellSolution( cell, 0 );\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t *\n\t * @param {PuzzleLine} line\n\t */\n\tfindAnchoredSections( line )\n\t{\n\t\tlet i, fillRange, firstSection, lastSection;\n\n\n\t\tif (line.sections.length > 0) {\n\n\t\t\tfirstSection = line.sections[0];\n\t\t\tlastSection  = line.sections[line.sections.length - 1];\n\n\t\t\t// find sections anchored to start of line\n\n\t\t\tfillRange = null;\n\n\t\t\tfor (i = 0; i < line.cells.length; i++) {\n\n\t\t\t\tif (line.cells[i].aiSolution === null) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (line.cells[i].aiSolution === 1) {\n\t\t\t\t\tfillRange = [i, i + firstSection.length - 1];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (fillRange !== null) {\n\n\t\t\t\tfor (i = fillRange[0]; i <= fillRange[1]; i++) {\n\t\t\t\t\tif (line.cells[i]) {\n\t\t\t\t\t\tthis._setCellSolution( line.cells[i], 1 );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (line.cells[i]) {\n\t\t\t\t\tthis._setCellSolution( line.cells[i], 0 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// find sections anchored to end of line\n\n\t\t\tfillRange = null;\n\n\t\t\tfor (i = line.cells.length - 1; i >= 0; i--) {\n\n\t\t\t\tif (line.cells[i].aiSolution === null) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (line.cells[i].aiSolution === 1) {\n\t\t\t\t\tfillRange = [i - lastSection.length + 1, i];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (fillRange !== null) {\n\n\t\t\t\tfor (i = fillRange[0]; i <= fillRange[1]; i++) {\n\t\t\t\t\tif (line.cells[i]) {\n\t\t\t\t\t\tthis._setCellSolution( line.cells[i], 1 );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (line.cells[fillRange[0] - 1]) {\n\t\t\t\t\tthis._setCellSolution( line.cells[fillRange[0] - 1], 0 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t *\n\t * @param {PuzzleLine} line\n\t */\n\tfindSectionDefiningChains( line )\n\t{\n\t\tlet chains    = [],\n\t\t\tlastValue = 0,\n\t\t\tcellKey, cell, chain, chainKey, sectionsSorted, firstSortedSection\n\t\t;\n\n\n\t\t// sort sections by highest length to lowest\n\n\t\tsectionsSorted     = Utility.cloneArray( line.sections ).sort( function ( a, b )\n\t\t{\n\t\t\treturn a.length > b.length ? -1 : 1;\n\t\t} );\n\t\tfirstSortedSection = sectionsSorted[0];\n\n\n\t\t// loop through all cells, creating array of connectors\n\n\t\tfor (cellKey = 0; cellKey < line.cells.length; cellKey++) {\n\n\t\t\tcell = line.cells[cellKey];\n\n\t\t\tif (cell.aiSolution === 1) {\n\n\t\t\t\tif (lastValue !== 1) {\n\t\t\t\t\tchain = {\n\t\t\t\t\t\tstart:  cellKey,\n\t\t\t\t\t\tlength: 1\n\t\t\t\t\t};\n\t\t\t\t\tchains.push( chain );\n\t\t\t\t} else if (chain) {\n\t\t\t\t\tchain.length++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlastValue = cell.aiSolution;\n\t\t}\n\n\n\t\t// if a connector is found with the first section's length, place negatives around it and mark the section as complete & continue\n\n\t\tfor (chainKey = 0; chainKey < chains.length; chainKey++) {\n\n\t\t\tchain = chains[chainKey];\n\n\t\t\tif (chain.length === firstSortedSection.length) {\n\n\t\t\t\tif (line.cells[chain.start - 1]) {\n\t\t\t\t\tthis._setCellSolution( line.cells[chain.start - 1], 0 );\n\t\t\t\t}\n\n\t\t\t\tif (line.cells[chain.start + firstSortedSection.length]) {\n\t\t\t\t\tthis._setCellSolution( line.cells[chain.start + firstSortedSection.length], 0 );\n\t\t\t\t}\n\n\t\t\t\tfirstSortedSection.solved = true;\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t *\n\t * @param {PuzzleLine} line\n\t */\n\tfindCompletedSections( line )\n\t{\n\t\tlet sectionKey, section, firstNegative, lastNegative;\n\n\t\t// complete lines where all sections have been found\n\n\t\tfor (sectionKey = 0; sectionKey < line.sections.length; sectionKey++) {\n\n\t\t\tsection = line.sections[sectionKey];\n\n\n\t\t\t// only one possible place...\n\n\t\t\tif (!section.solved && section.possibleStartIndexes.length === 1) {\n\n\t\t\t\t// make sure there is a negative cell on either side of the section\n\n\t\t\t\tfirstNegative = section.possibleStartIndexes[0] - 1;\n\t\t\t\tlastNegative  = section.possibleStartIndexes[0] + section.length;\n\n\t\t\t\tif (line.cells[firstNegative] && line.cells[firstNegative].aiSolution === null) {\n\t\t\t\t\tthis._setCellSolution( line.cells[firstNegative], 0 );\n\t\t\t\t}\n\t\t\t\tif (line.cells[lastNegative] && line.cells[lastNegative].aiSolution === null) {\n\t\t\t\t\tthis._setCellSolution( line.cells[lastNegative], 0 );\n\t\t\t\t}\n\n\t\t\t\tsection.solved = true;\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t *\n\t * @param {PuzzleLine} line\n\t */\n\tfindCompletedLines( line )\n\t{\n\t\tlet totalSectionLength  = 0,\n\t\t\ttotalPositiveSolved = 0,\n\t\t\tsectionKey, section, cellKey, cell\n\t\t;\n\n\t\t// complete lines where all sections have been found\n\n\t\tfor (sectionKey = 0; sectionKey < line.sections.length; sectionKey++) {\n\n\t\t\tsection = line.sections[sectionKey];\n\t\t\ttotalSectionLength += section.length;\n\t\t}\n\n\t\tfor (cellKey = 0; cellKey < line.cells.length; cellKey++) {\n\n\t\t\tcell = line.cells[cellKey];\n\t\t\ttotalPositiveSolved += cell.aiSolution === 1;\n\t\t}\n\n\t\tif (totalSectionLength === totalPositiveSolved) {\n\n\t\t\tfor (cellKey = 0; cellKey < line.cells.length; cellKey++) {\n\n\t\t\t\tcell = line.cells[cellKey];\n\n\t\t\t\tif (cell.aiSolution === null) {\n\t\t\t\t\tthis._setCellSolution( cell, 0 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\t//\t#############################################################################################\tprivate methods\n\n\n\t/**\n\t *\n\t * @private\n\t */\n\t_reset()\n\t{\n\t\tconst possibleRowIndexes    = [],\n\t\t\t  possibleColumnIndexes = []\n\t\t;\n\t\tlet i, cellKey, rowNumber, rowHints, rowCells, line, index, len, columnKey, columnHint;\n\n\t\tthis.isReset     = true;\n\t\tthis.elapsedTime = 0;\n\t\tthis.solutionLog = [];\n\t\tthis.lines       = [];\n\n\t\tthis._log( 'Resetting variables', 'info' );\n\n\t\t// reset cell.aiSolution\n\n\t\tfor (cellKey = 0; cellKey < this.puzzle.cells.length; cellKey++) {\n\t\t\tthis.puzzle.cells[cellKey].aiSolution = null;\n\t\t}\n\n\t\t// reset possibleRowIndexes\n\n\t\tfor (i = 0; i < this.puzzle.width; i++) {\n\t\t\tpossibleRowIndexes.push( i );\n\t\t}\n\n\t\t// reset possibleColumnIndexes\n\n\t\tfor (i = 0; i < this.puzzle.height; i++) {\n\t\t\tpossibleColumnIndexes.push( i );\n\t\t}\n\n\t\t// reset rowHints\n\n\t\tfor (rowNumber = 0; rowNumber < this.puzzle.rowHints.length; rowNumber++) {\n\n\t\t\trowHints = this.puzzle.rowHints[rowNumber];\n\t\t\trowCells = this.puzzle.getRowCells( rowNumber );\n\n\t\t\tif (rowCells) {\n\n\t\t\t\tline = new PuzzleLine( {\n\t\t\t\t\ttype:   'row',\n\t\t\t\t\tindex:  rowNumber,\n\t\t\t\t\tlength: this.puzzle.width,\n\t\t\t\t\tcells:  rowCells\n\t\t\t\t} );\n\n\t\t\t\tfor (index = 0; index < rowHints.length; index++) {\n\n\t\t\t\t\tlen = rowHints[index];\n\t\t\t\t\tline.sections.push( {\n\t\t\t\t\t\tindex:                index,\n\t\t\t\t\t\tlength:               len,\n\t\t\t\t\t\tpossibleStartIndexes: possibleRowIndexes,\n\t\t\t\t\t\tknownIndexes:         [],\n\t\t\t\t\t\tsolved:               false\n\t\t\t\t\t} );\n\n\t\t\t\t\tline.minimumSectionLength += len + 1;\n\t\t\t\t}\n\n\t\t\t\tline.minimumSectionLength--;\n\n\t\t\t\tthis.lines.push( line );\n\t\t\t}\n\t\t}\n\n\t\t// reset columnHints\n\n\t\tfor (columnKey = 0; columnKey < this.puzzle.columnHints.length; columnKey++) {\n\n\t\t\tcolumnHint = this.puzzle.columnHints[columnKey];\n\t\t\tline       = new PuzzleLine( {\n\t\t\t\ttype:   'column',\n\t\t\t\tindex:  columnKey,\n\t\t\t\tlength: this.puzzle.height,\n\t\t\t\tcells:  this.puzzle.getColumnCells( columnKey ),\n\t\t\t} );\n\n\t\t\tfor (index = 0; index < columnHint.length; index++) {\n\t\t\t\tlen = columnHint[index];\n\t\t\t\tline.sections.push( {\n\t\t\t\t\tindex:                index,\n\t\t\t\t\tlength:               len,\n\t\t\t\t\tpossibleStartIndexes: possibleColumnIndexes,\n\t\t\t\t\tknownIndexes:         [],\n\t\t\t\t\tsolved:               false\n\t\t\t\t} );\n\n\t\t\t\tline.minimumSectionLength += len + 1;\n\t\t\t}\n\n\t\t\tline.minimumSectionLength--;\n\n\t\t\tthis.lines.push( line );\n\t\t}\n\t}\n\n\n\t/**\n\t *\n\t * @param {PuzzleCell} puzzleCell\n\t * @param {number} value\n\t * @private\n\t */\n\t_setCellSolution( puzzleCell, value )\n\t{\n\t\tlet lineKey, line, isRow, isCol, cellsSolved, cellKey, cell;\n\n\t\tif (puzzleCell.aiSolution !== null) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (lineKey = 0; lineKey < this.lines.length; lineKey++) {\n\n\t\t\tline        = this.lines[lineKey];\n\t\t\tisRow       = line.type === 'row' && line.index === puzzleCell.row;\n\t\t\tisCol       = line.type === 'column' && line.index === puzzleCell.column;\n\t\t\tcellsSolved = 0;\n\n\t\t\tif (isRow || isCol) {\n\n\t\t\t\tfor (cellKey = 0; cellKey < line.cells.length; cellKey++) {\n\n\t\t\t\t\tcell = line.cells[cellKey];\n\n\t\t\t\t\tif (cell.index === puzzleCell.index) {\n\t\t\t\t\t\tcell.aiSolution = value;\n\t\t\t\t\t\tcellsSolved++;\n\t\t\t\t\t} else if (cell.aiSolution !== null) {\n\t\t\t\t\t\tcellsSolved++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (cellsSolved === line.length) {\n\t\t\t\t\tline.solved = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t *\n\t * @param html\n\t * @param cssClass\n\t * @private\n\t */\n\t_log( html, cssClass )\n\t{\n\t\tthis.solutionLog.push( {\n\t\t\thtml:     html,\n\t\t\tcssClass: cssClass || 'info'\n\t\t} );\n\t}\n\n\n\t/**\n\t *\n\t * @returns {number}\n\t * @private\n\t */\n\t_getTotalSolved()\n\t{\n\t\tlet total = 0,\n\t\t\tcellKey\n\t\t;\n\n\t\tfor (cellKey = 0; cellKey < this.puzzle.cells.length; cellKey++) {\n\t\t\ttotal += this.puzzle.cells[cellKey].aiSolution !== null;\n\t\t}\n\n\t\treturn total;\n\t}\n\n\n\t/**\n\t * calculate the maximum # of possible permutations, depending on the current state of the solving process.\n\t *\n\t * @returns {number}\n\t * @private\n\t */\n\t_getProgress()\n\t{\n\t\tlet maxPossibilities   = 0,\n\t\t\ttotalPossibilities = 0,\n\t\t\tlineKey, line, sectionKey\n\t\t;\n\n\t\tfor (lineKey = 0; lineKey < this.lines.length; lineKey++) {\n\n\t\t\tline = this.lines[lineKey];\n\t\t\tmaxPossibilities += line.sections.length * (line.type === 'row' ? this.puzzle.width : this.puzzle.height);\n\n\t\t\tfor (sectionKey = 0; sectionKey < line.sections.length; sectionKey++) {\n\t\t\t\ttotalPossibilities += line.sections[sectionKey].possibleStartIndexes.length;\n\t\t\t}\n\t\t}\n\n\t\treturn maxPossibilities - totalPossibilities;\n\t}\n\n};\n\n\n\n\n\n\n\n","import {Puzzle} from '../src/puzzle.js';\nimport {PuzzleCell} from '../src/puzzle-cell.js';\nimport {Solver} from '../src/solver.js';\nimport {Utility} from '../src/utility.js';\n\n\nexport {Creator};\n\n/**\n * @class\n * @type {Creator}\n * @this Creator\n *\n * creates nonogram puzzles\n *\n * @property {Puzzle} puzzle\n * @property {array} log\n * @property {number} creationTime\n * @property {number} solvingTime\n */\nconst Creator = class\n{\n\n\n\t// ######################################################################################\tpublic methods\n\n\t/**\n\t * populates the puzzles rows and columns with random, solvable values\n\t *\n\t * @param {number} width\n\t * @param {number} height\n\t * @param {number|null} density - a floating point number between 0 and 1 (optional) that controls the percentage of filled cell likelihood.\n\t *                                    If not supplied a random value between 0.2 and 0.8 will be generated.\n\t *                                    Note that this does not make a puzzle grid filled in by the percentage,\n\t *                                    rather it's a 'suggestion' that is run through randomization on a cell-by-cell basis.\n\t * @returns {Puzzle|Puzzle|class}\n\t */\n\tcreateRandom( width, height, density )\n\t{\n\t\tconst start      = new Date().getTime();\n\t\tlet puzzleValid  = false,\n\t\t\tdensityValid = typeof density === 'number' && density >= 0 && density <= 1,\n\t\t\tcellsFilled, chanceOfCellFill, solutionGrid, rowArray, cellValue, solver, i, elapsed\n\t\t;\n\n\n\t\tthis.puzzle = new Puzzle( width, height );\n\t\tthis._reset();\n\n\n\t\twhile (puzzleValid === false) {\n\n\t\t\tchanceOfCellFill = densityValid ? density : Utility.getRandomIntBetween( 200, 800 ) / 1000;\n\t\t\tsolutionGrid     = [];\n\t\t\trowArray         = [];\n\t\t\tcellsFilled      = 0;\n\n\t\t\tthis._log( 'Creating random ' +\n\t\t\t\tthis.puzzle.width + 'x' + this.puzzle.height +\n\t\t\t\t' puzzle with density of ' + chanceOfCellFill + '...'\n\t\t\t);\n\n\t\t\t// create puzzle grid randomly using density as a factor\n\n\t\t\tfor (i = 0; i < this.puzzle.totalCells; i++) {\n\n\t\t\t\tcellValue = Math.random() < chanceOfCellFill ? 1 : 0;\n\n\t\t\t\tcellsFilled += cellValue;\n\n\t\t\t\tif (i % this.puzzle.width === 0 && i > 0) {\n\t\t\t\t\tsolutionGrid.push( rowArray );\n\t\t\t\t\trowArray = [];\n\t\t\t\t}\n\n\t\t\t\trowArray.push( cellValue );\n\t\t\t}\n\n\t\t\t// ensure that at least one cell is filled, and that not all of them are\n\n\t\t\tif (cellsFilled === 0) {\n\n\t\t\t\tthis._log( 'Generated puzzle has no cells filled.  Trying again...' );\n\t\t\t\tcontinue;\n\n\t\t\t} else if (cellsFilled === this.puzzle.totalCells) {\n\n\t\t\t\tthis._log( 'Generated puzzle has all cells filled.  Trying again...' );\n\t\t\t\tcontinue;\n\t\t\t}\n\n\n\t\t\t// populate the solution grid\n\t\t\tsolutionGrid.push( rowArray );\n\n\t\t\t// populate the grid\n\t\t\tthis.puzzle = Creator._populatePuzzleFromGrid( this.puzzle, solutionGrid );\n\n\n\t\t\t// ensure that puzzle is solvable\n\t\t\tsolver = new Solver( this.puzzle );\n\n\t\t\tif (solver.solve()) {\n\n\t\t\t\tpuzzleValid = true;\n\t\t\t\telapsed     = (new Date().getTime() - start) / 1000;\n\n\t\t\t\tthis._log( 'Puzzle is solvable - solved in ' + solver.elapsedTime + ' seconds' );\n\t\t\t\tthis._logLine();\n\t\t\t\tthis._log( 'Puzzle generated in ' + elapsed + ' seconds.' );\n\n\t\t\t\tthis.creationTime = elapsed;\n\t\t\t\tthis.solvingTime  = solver.elapsedTime;\n\n\t\t\t} else {\n\n\t\t\t\tthis._log( 'Puzzle cannot be solved.  Trying again...' );\n\t\t\t}\n\n\t\t\tthis._logLine();\n\t\t}\n\n\t\tthis.puzzle.creator = this;\n\n\t\treturn this.puzzle;\n\t}\n\n\n\t/**\n\t * - create a puzzle using a grid\n\t *\n\t * @param {array} grid - a multi-dimensional array representing rows and columns.\n\t *                         for example a 2x2 grid could be represented by [[0,1],[0,0]]\n\t * @throws - error if grid is invalid\n\t */\n\tcreateFromGrid( grid )\n\t{\n\t\tconst start = new Date();\n\t\tlet width   = 0,\n\t\t\theight  = 0,\n\t\t\tpuzzle, solver, elapsed\n\t\t;\n\n\t\tthis._reset();\n\n\t\tthis._log( 'creating puzzle from grid array.' );\n\n\t\t// make sure grid is valid and get width & height\n\t\tif (!(grid instanceof Array)) {\n\t\t\tthrow 'grid is not an array';\n\t\t}\n\n\n\t\tgrid.forEach( ( row, rowKey ) =>\n\t\t{\n\t\t\tif (!(row instanceof Array)) {\n\t\t\t\tthrow 'grid is not a multi-dimensional array';\n\t\t\t}\n\n\t\t\tif (width === 0) {\n\t\t\t\twidth = row.length;\n\t\t\t} else if (row.length !== width) {\n\t\t\t\tthrow 'row ' + rowKey + ' has an invalid length (' + row.length + ') - expecting ' + width;\n\t\t\t}\n\n\t\t\theight++;\n\t\t} );\n\n\t\tthis._log( 'grid is valid' );\n\t\tthis._log( 'populating ' + width + 'x' + height + ' puzzle' );\n\n\t\tpuzzle = new Puzzle( width, height );\n\n\t\tthis.puzzle         = Creator._populatePuzzleFromGrid( puzzle, grid );\n\t\tthis.puzzle.creator = this;\n\n\t\t// ensure that puzzle is solvable\n\n\t\tsolver = new Solver( this.puzzle );\n\n\n\t\tif (solver.solve()) {\n\n\t\t\tthis._log( 'Puzzle is solvable.' );\n\t\t\tthis._logLine();\n\n\t\t} else {\n\n\t\t\tthis._log( 'Puzzle cannot be solved.' );\n\t\t\tthis._logLine();\n\t\t\treturn false;\n\t\t}\n\n\t\telapsed = (new Date().getTime() - start) / 1000;\n\n\t\tthis._log( 'Puzzle built and solved in ' + elapsed + ' seconds.' );\n\t\tthis._logLine();\n\n\t\treturn this.puzzle;\n\t}\n\n\n\t/**\n\t * - create a puzzle from a hint object\n\t *\n\t * @param {object} hints - structured as follows:\n\t *                            {\n\t *\t\t\t\t\t\t\t\t\trow: [[3], [5], [5], [2, 3], [1, 5], [2, 1, 1], [2, 5], [1, 3]],\n\t *\t\t\t\t\t\t\t\t\tcolumn: [[1, 3], [4], [], [2, 3], [5, 2], [5, 2], [5, 2], [2, 3]]\n\t *\t\t\t\t\t\t\t  }\n\t * @param {array} hints.row\n\t * @param {array} hints.column\n\t * @throws - error if hints object is structured incorrectly\n\t */\n\tcreateFromHints( hints )\n\t{\n\t\tconst start = new Date();\n\t\tlet width, height, puzzle, solver, elapsed;\n\n\t\tthis._reset();\n\n\t\tthis._log( 'creating puzzle from hints' );\n\n\t\t// make sure row & column properties exist\n\n\t\tif (typeof hints !== 'object' || !hints.row || !hints.column) {\n\n\t\t\tthrow 'parameter passed to createFromHints() must be an object containing \"row\" and \"column\" properties';\n\n\t\t} else if (!(hints.row instanceof Array) || !(hints.column instanceof Array)) {\n\n\t\t\tthrow 'hints.row or hints.column must be an array.';\n\t\t}\n\t\t\n\t\tthis._log( 'found row and column hints' );\n\n\t\twidth              = hints.column.length;\n\t\theight             = hints.row.length;\n\t\tpuzzle             = new Puzzle( width, height );\n\t\tpuzzle.rowHints    = hints.row;\n\t\tpuzzle.columnHints = hints.column;\n\t\tpuzzle.creator     = this;\n\n\t\tthis._log( 'populating ' + width + 'x' + height + ' puzzle' );\n\n\n\t\t// populate cells array\n\n\t\tpuzzle.grid.forEach( ( row, rowKey ) =>\n\t\t{\n\t\t\trow.forEach( ( column, columnKey ) =>\n\t\t\t{\n\t\t\t\tpuzzle.cells.push( new PuzzleCell( {\n\t\t\t\t\tindex:  (rowKey * puzzle.width) + columnKey,\n\t\t\t\t\tcolumn: columnKey,\n\t\t\t\t\trow:    rowKey\n\t\t\t\t} ) );\n\t\t\t} );\n\t\t} );\n\n\t\tthis.puzzle = puzzle;\n\n\n\t\t// ensure that puzzle is solvable\n\n\t\tsolver = new Solver( this.puzzle );\n\n\n\t\tif (solver.solve()) {\n\n\t\t\tthis._log( 'Puzzle is solvable.' );\n\t\t\tthis._logLine();\n\n\t\t} else {\n\n\t\t\tthis._log( 'Puzzle cannot be solved.' );\n\t\t\tthis._logLine();\n\t\t\treturn false;\n\t\t}\n\n\t\t// set solution on puzzle cells\n\n\t\tsolver.puzzle.cells.forEach( ( solvedCell, cellIndex ) =>\n\t\t{\n\t\t\tconst puzzleCell = this.puzzle.getCellByIndex( cellIndex );\n\n\t\t\tpuzzleCell.aiSolution = solvedCell.aiSolution;\n\t\t\tpuzzleCell.solution   = solvedCell.aiSolution;\n\t\t} );\n\n\t\telapsed = (new Date().getTime() - start) / 1000;\n\n\t\tthis._log( 'Puzzle built and solved in ' + elapsed + ' seconds.' );\n\t\tthis._logLine();\n\n\t\treturn this.puzzle;\n\t}\n\n\n\t// ######################################################################################\tprivate methods\n\n\t/**\n\t *\n\t * @param {Puzzle} puzzle\n\t * @param {array} grid - a multidimensional array\n\t * @returns {Puzzle} puzzle\n\t * @private\n\t */\n\tstatic _populatePuzzleFromGrid( puzzle, grid )\n\t{\n\t\tlet columnHints, rowKey, row, columnKey, column, cell, currentVal, lastVal, rowHints, hintKey, hint;\n\n\t\tpuzzle.reset();\n\n\t\tpuzzle.grid = grid;\n\n\n\t\tfor (rowKey = 0; rowKey < puzzle.grid.length; rowKey++) {\n\n\t\t\trow      = puzzle.grid[rowKey];\n\t\t\trowHints = [];\n\n\t\t\tpuzzle.rowHints[rowKey] = [];\n\n\t\t\tfor (columnKey = 0; columnKey < row.length; columnKey++) {\n\n\t\t\t\tcolumn     = row[columnKey];\n\t\t\t\tcurrentVal = column;\n\t\t\t\tlastVal    = columnKey > 0 ? puzzle.grid[rowKey][columnKey - 1] : 0;\n\n\t\t\t\t// populate cells\n\n\t\t\t\tpuzzle.cells.push( new PuzzleCell( {\n\t\t\t\t\tindex:    (rowKey * puzzle.width) + columnKey,\n\t\t\t\t\tcolumn:   columnKey,\n\t\t\t\t\trow:      rowKey,\n\t\t\t\t\tsolution: column\n\t\t\t\t} ) );\n\n\t\t\t\t// populate row hints\n\n\t\t\t\tif (currentVal === 1 && lastVal === 0) {\n\t\t\t\t\trowHints.push( 1 );\n\t\t\t\t} else if (currentVal === 0 && lastVal === 1) {\n\t\t\t\t\trowHints.push( 0 );\n\t\t\t\t} else if (currentVal === 1 && lastVal === 1) {\n\t\t\t\t\trowHints[rowHints.length - 1]++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// clean up row hints\n\n\t\t\tfor (hintKey = 0; hintKey < rowHints.length; hintKey++) {\n\n\t\t\t\thint = rowHints[hintKey];\n\n\t\t\t\tif (hint > 0) {\n\t\t\t\t\tpuzzle.rowHints[rowKey].push( hint );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// populate column hints\n\n\t\tfor (columnKey = 0; columnKey < puzzle.width; columnKey++) {\n\n\t\t\tpuzzle.columnHints[columnKey] = [];\n\t\t\tcolumnHints                   = [];\n\n\t\t\tfor (cell = columnKey; cell < puzzle.totalCells; cell += puzzle.width) {\n\n\t\t\t\trow        = Math.floor( cell / puzzle.width );\n\t\t\t\tcurrentVal = puzzle.grid[row][columnKey];\n\t\t\t\tlastVal    = row > 0 ? puzzle.grid[row - 1][columnKey] : 0;\n\n\t\t\t\tif (currentVal === 1 && lastVal === 0) {\n\t\t\t\t\tcolumnHints.push( 1 );\n\t\t\t\t} else if (currentVal === 0 && lastVal === 1) {\n\t\t\t\t\tcolumnHints.push( 0 );\n\t\t\t\t} else if (currentVal === 1 && lastVal === 1) {\n\t\t\t\t\tcolumnHints[columnHints.length - 1]++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// clean up column hints\n\n\t\t\tfor (hintKey = 0; hintKey < columnHints.length; hintKey++) {\n\n\t\t\t\thint = columnHints[hintKey];\n\n\t\t\t\tif (hint > 0) {\n\t\t\t\t\tpuzzle.columnHints[columnKey].push( hint );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn puzzle;\n\t}\n\n\n\t/**\n\t *\n\t * @param msg\n\t * @private\n\t */\n\t_log( msg )\n\t{\n\t\tthis.log.push( msg );\n\t}\n\n\n\t/**\n\t *\n\t * @private\n\t */\n\t_logLine()\n\t{\n\t\tthis.log.push( '-----------------------------------' );\n\t}\n\n\n\t/**\n\t * @private\n\t */\n\t_reset()\n\t{\n\t\tthis.log          = [];\n\t\tthis.creationTime = 0;\n\t\tthis.solvingTime  = 0;\n\t}\n\n};\n\n","export {GuiTemplate};\n\n\n/**\n * @class\n * @type {GuiTemplate}\n * @this GuiTemplate\n *\n * @property {string} name\n * @property {string} path\n * @property {string} html\n * @property {array} loadedCallbacks\n * @property {Promise} loadedPromise - resolves once template has been loaded and parsed\n * @property {boolean} isLoaded\n */\nconst GuiTemplate = class\n{\n\t/**\n\t * class for loading an html template\n\t *\n\t * @param name\n\t * @param path\n\t */\n\tconstructor( name, path )\n\t{\n\t\tthis.name              = name;\n\t\tthis.path              = path;\n\t\tthis.html              = '';\n\t\tthis.onLoadedCallbacks = [];\n\t\tthis.isLoaded          = false;\n\t\tthis.loadedPromise     = null;\n\t}\n\n\n\t// noinspection JSUnusedGlobalSymbols\n\t/**\n\t * attach a callback to fire once template has loaded\n\t *\n\t * @param {function} callback\n\t */\n\tonLoad( callback )\n\t{\n\t\tthis.onLoadedCallbacks.push( callback );\n\t}\n\n\n\t/**\n\t * fired when template is loaded.  executes all onLoad callbacks\n\t */\n\tfireOnLoaded()\n\t{\n\t\tthis.onLoadedCallbacks.forEach( ( callback ) =>\n\t\t{\n\t\t\tcallback();\n\t\t} );\n\t}\n\n\n\t/**\n\t * attempts to fetch a template specified by this.path\n\t *\n\t * @returns {Promise} - complete when template has been fetched and parsed\n\t * @throws - error if template cannot be loaded\n\t */\n\tload()\n\t{\n\t\tthis.loadedPromise = new Promise( ( resolve ) =>\n\t\t{\n\t\t\tfetch( this.path ).then( ( response ) =>\n\t\t\t{\n\t\t\t\tif (response.ok) {\n\n\t\t\t\t\tresponse.text().then( ( text ) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.html     = text;\n\t\t\t\t\t\tthis.isLoaded = true;\n\t\t\t\t\t\tthis.fireOnLoaded();\n\n\t\t\t\t\t\tresolve( this.name + ' loaded and parsed' );\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow 'loading failed for \"' + this.path + '\"';\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\n\t\treturn this.loadedPromise;\n\t}\n\n\n\t/**\n\t * get the html template as a DOM node\n\t * @returns {HTMLDivElement}\n\t */\n\tgetNode()\n\t{\n\t\tconst div = document.createElement( 'div' );\n\n\t\tdiv.innerHTML = this.html;\n\n\t\treturn div;\n\t}\n\n};\n","export {PuzzleLibrary};\n\n\n/**\n *\n * @type {{'Large Example 1': {hints: {column: *[], row: *[]}, width: number, height: number}, 'Small Example 2': {hints: {column: *[], row: *[]}, width: number, height: number}, 'Medium Example 1': {hints: {column: *[], row: *[]}, width: number, height: number}, 'Small Example 1': {solutionGrid: *[], width: number, height: number}, 'Medium Example 2': {hints: {column: *[], row: *[]}, width: number, height: number}, 'Small Example 3': {hints: {column: *[], row: *[]}, width: number, height: number}}}\n */\nconst PuzzleLibrary = {\n\n\t\"Small Example 1\": {\n\t\twidth:        8,\n\t\theight:       8,\n\t\tsolutionGrid: [\n\t\t\t[0, 0, 0, 0, 1, 1, 1, 0],\n\t\t\t[0, 0, 0, 1, 1, 1, 1, 1],\n\t\t\t[0, 0, 0, 1, 1, 1, 1, 1],\n\t\t\t[1, 1, 0, 0, 1, 1, 1, 0],\n\t\t\t[0, 1, 0, 1, 1, 1, 1, 1],\n\t\t\t[1, 1, 0, 1, 0, 0, 0, 1],\n\t\t\t[1, 1, 0, 1, 1, 1, 1, 1],\n\t\t\t[1, 0, 0, 0, 1, 1, 1, 0]\n\t\t]\n\t},\n\n\t\"Small Example 2\": {\n\t\twidth:  8,\n\t\theight: 8,\n\t\thints:  {\n\t\t\trow:    [[3], [5], [5], [2, 3], [1, 5], [2, 1, 1], [2, 5], [1, 3]],\n\t\t\tcolumn: [[1, 3], [4], [], [2, 3], [5, 2], [5, 2], [5, 2], [2, 3]]\n\t\t}\n\t},\n\n\t\"Small Example 3\": {\n\t\twidth:  10,\n\t\theight: 10,\n\t\thints:  {\n\t\t\tcolumn: [\n\t\t\t\t[3], [1, 1], [1], [6], [8], [2, 1], [4, 1], [10], [3, 1], [3]\n\t\t\t],\n\t\t\trow:    [\n\t\t\t\t[4], [5], [2, 3], [2, 3], [2, 1], [2, 1], [2, 1], [10], [1, 1, 1], [2, 1, 1]\n\t\t\t]\n\t\t}\n\t},\n\n\t\"Medium Example 1\": {\n\t\twidth:  16,\n\t\theight: 18,\n\t\thints:  {\n\t\t\tcolumn: [\n\t\t\t\t[5], [4, 3, 3], [7, 6, 2], [4, 3, 4, 1], [3, 2, 4, 1, 2], [2, 6, 4], [3, 3, 1, 1], [4, 6, 4], [6, 4, 1, 1], [4, 3, 4, 1], [7, 6, 2], [4, 3, 3], [5], [3], [5, 3, 3], [2, 4, 1, 2]\n\t\t\t],\n\t\t\trow:    [\n\t\t\t\t[5], [9], [3, 5], [3, 5, 1], [4, 4, 2], [2, 1, 1, 2, 1], [2, 2, 1], [2, 3, 2, 1], [7, 2], [9, 1], [2, 2, 2, 2, 2], [3, 2, 2, 3, 2], [4, 1, 1, 6], [1, 2, 2, 2], [16], [2, 1, 1, 1, 1, 2, 1], [2, 2, 2, 2, 2], [9, 1]\n\t\t\t]\n\t\t}\n\t},\n\n\n\t\"Medium Example 2\": {\n\t\twidth:  15,\n\t\theight: 15,\n\t\thints:  {\n\t\t\tcolumn: [\n\t\t\t\t[4], [3, 1], [2, 3], [1, 2, 2], [1, 2, 1], [1, 1, 1, 1], [4, 3, 3], [2, 2, 4, 3], [1, 2, 5, 1], [1, 2, 4, 1], [1, 2, 5, 1], [2, 2, 4, 3], [9, 3], [5, 1, 1], [6, 1]\n\t\t\t],\n\t\t\trow:    [\n\t\t\t\t[4, 5], [3, 2, 2], [2, 1, 1], [1, 4, 3], [2, 9], [2, 8], [2, 3], [12], [1, 7, 1], [9], [5], [1, 1], [2, 2], [3, 3], [1, 7, 1]\n\t\t\t]\n\t\t}\n\t},\n\n\t\"Large Example 1\": {\n\t\twidth:  30,\n\t\theight: 30,\n\t\thints:  {\n\t\t\tcolumn: [\n\t\t\t\t[19, 9], [13, 1, 2, 1, 5], [11, 4, 1, 1, 2, 3], [10, 6, 1, 4, 1, 1], [9, 7, 1, 1, 3, 2], [3, 4, 11, 1, 6], [2, 1, 2, 3, 3, 3, 7], [2, 2, 1, 2, 4, 3, 8], [3, 2, 2, 1, 2, 6, 7], [1, 3, 3, 4, 1, 4, 4, 1], [5, 4, 2, 5, 2, 2], [1, 3, 11, 1, 2, 4], [3, 2, 14, 5], [2, 2, 1, 14, 7], [1, 2, 2, 2, 10, 2], [2, 1, 3, 2, 6, 3, 3], [5, 6, 6, 2, 2, 4], [6, 4, 4, 3, 3, 3], [6, 3, 2, 1, 1, 3, 5, 2], [6, 1, 2, 2, 2, 2, 2, 3], [7, 1, 9, 2, 4], [7, 3, 1, 2, 2, 3], [8, 2, 5, 4, 3], [6, 1, 7, 11], [5, 1, 3, 2, 12], [5, 2, 2, 2, 3, 11], [4, 5, 4, 3, 10], [3, 14, 10], [3, 3, 5, 2, 9], [4, 3, 3, 10]\n\t\t\t],\n\t\t\trow:    [\n\t\t\t\t[10, 19], [9, 1, 2, 15], [6, 1, 1, 1, 14], [5, 2, 3, 2, 11, 1], [6, 7, 11, 1], [7, 5, 7, 3], [8, 4, 3, 4], [6, 4, 5, 1, 4, 1], [5, 8, 6, 2, 1], [4, 10, 3, 3, 3, 1], [3, 3, 5, 2, 4, 2, 2], [2, 3, 3, 3, 2, 4, 2, 3], [2, 3, 1, 1, 5, 2, 1, 6], [1, 4, 3, 4, 2, 2, 2, 4], [1, 4, 3, 4, 5, 3, 3], [1, 5, 5, 2, 1, 4, 1, 1], [1, 15, 3, 2, 3, 1], [2, 4, 7, 2, 2, 3, 1], [1, 4, 4, 7, 2, 1, 3], [1, 2, 3, 4, 3, 3, 1], [1, 1, 3, 5, 2, 6, 1], [1, 1, 1, 4, 4, 9], [2, 3, 1, 1, 1, 9], [1, 2, 4, 1, 1, 6, 8], [1, 10, 1, 7, 7], [2, 8, 2, 1, 2, 1, 7], [3, 6, 3, 1, 1, 1, 7], [4, 4, 4, 3, 11], [3, 5, 20], [2, 7, 19]\n\t\t\t]\n\t\t}\n\t}\n};\n\n","import {GuiTemplate} from '../src/gui-template.js';\nimport {PuzzleLibrary} from '../src/puzzle-library.js';\nimport {Creator} from '../src/creator.js';\n\n\nexport {Gui};\n\n/**\n * @class\n * @type {Gui}\n * @this Gui\n *\n * provides a user interface for interacting with nonogram puzzles\n *\n * @property {Puzzle} puzzle\n * @property {HTMLElement} gridContainer - container element for the puzzle grid ui\n * @property {array} templates - array of GuiTemplate objects\n * @property {array} templatesLoaded - array of Promises from each loaded template\n * @property {string|null} theme - the theme to use, located in the themes/ directory\n * @property {string} themePath - the path to the specified theme located in themes/{theme}\n * @property {string} themeStylesheetPath - the path to the theme stylesheet located in themes/{theme}/styles.css\n * @property {string} themeTemplatesPath - the path to the theme template directory located in themes/{theme}/templates\n * @property {int} playerClickMode - whether to fill or cross a cell on click\n */\nconst Gui = class\n{\n\n\t/**\n\t *\n\t * @param {string|null} themePath - the path to the theme directory.  Defaults to ./themes/default\n\t */\n\tconstructor( themePath )\n\t{\n\t\tconst head = document.querySelector( 'head' ),\n\t\t\t  link = document.createElement( 'link' )\n\t\t;\n\n\t\t// set up board sizes\n\t\tthis.boardSizes = [\n\t\t\t{ name: 'Tiny', handle: 'tiny', size: 1 },\n\t\t\t{ name: 'Small', handle: 'small', size: 2 },\n\t\t\t{ name: 'Medium', handle: 'medium', size: 3 },\n\t\t\t{ name: 'Large', handle: 'large', size: 4 },\n\t\t];\n\t\tthis.boardSize  = this.boardSizes[2];\n\n\t\t// set up theme\n\t\tthis.themePath = themePath || './themes/default';\n\n\t\t// load theme stylesheet\n\t\tthis.themeStylesheetPath = this.themePath + '/styles.css';\n\t\tlink.rel                 = 'stylesheet';\n\t\tlink.type                = 'text/css';\n\t\tlink.href                = this.themeStylesheetPath;\n\t\thead.prepend( link );\n\n\t\t// set up templates\n\t\tthis.templatesLoaded    = [];\n\t\tthis.themeTemplatesPath = this.themePath + '/templates';\n\t\tthis.templates          = [\n\t\t\tnew GuiTemplate( 'gameControls', this.themeTemplatesPath + '/controls-game.html' ),\n\t\t\tnew GuiTemplate( 'generateControls', this.themeTemplatesPath + '/controls-generate.html' ),\n\t\t\tnew GuiTemplate( 'console', this.themeTemplatesPath + '/console.html' ),\n\t\t\tnew GuiTemplate( 'previewGrid', this.themeTemplatesPath + '/preview-grid.html' ),\n\t\t\tnew GuiTemplate( 'puzzleGrid', this.themeTemplatesPath + '/puzzle-grid.html' ),\n\t\t];\n\n\t\t// load templates\n\t\tthis.templates.forEach( ( template ) =>\n\t\t{\n\t\t\tthis.templatesLoaded.push(\n\t\t\t\ttemplate.load()\n\t\t\t);\n\t\t} );\n\t}\n\n\n\t// ######################################################################################\tpublic drawing methods\n\n\t/**\n\t * - draw all user interfaces once templates are loaded\n\t */\n\tdraw( puzzle )\n\t{\n\t\tthis.puzzle = puzzle;\n\n\t\tPromise.all( this.templatesLoaded ).then( () =>\n\t\t{\n\t\t\tthis.drawGenerateControls();\n\t\t\tthis.drawPuzzle( puzzle );\n\t\t\tthis.drawGameControls();\n\t\t\tthis.drawConsole();\n\t\t} );\n\t}\n\n\n\t/**\n\t * - draw the puzzle ui\n\t *\n\t * @param {Puzzle} puzzle\n\t */\n\tdrawPuzzle( puzzle )\n\t{\n\t\tPromise.all( this.templatesLoaded ).then( () =>\n\t\t{\n\t\t\tconst template = this._getTemplate( 'puzzleGrid' );\n\n\t\t\tthis.puzzle        = puzzle;\n\t\t\tthis.gridContainer = document.querySelector( '[data-nonogram-puzzle-grid]' );\n\n\n\t\t\tif (!this.gridContainer) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst container       = this.gridContainer,\n\t\t\t\t  node            = template.getNode(),\n\t\t\t\t  theadThTemplate = node.querySelector( '[data-nonogram-puzzle-grid-table-thead-th]' ),\n\t\t\t\t  rowTemplate     = node.querySelector( '[data-nonogram-puzzle-grid-table-row]' ),\n\t\t\t\t  cellClasses     = {\n\t\t\t\t\t  tl: 0,\n\t\t\t\t\t  tr: this.puzzle.width - 1,\n\t\t\t\t\t  bl: (this.puzzle.width * this.puzzle.height) - this.puzzle.width,\n\t\t\t\t\t  br: (this.puzzle.width * this.puzzle.height) - 1,\n\t\t\t\t  }\n\t\t\t;\n\n\t\t\t// table header\n\t\t\tthis.puzzle.columnHints.forEach( ( hints, columnIndex ) =>\n\t\t\t{\n\t\t\t\tconst clonedTheadThTemplate = document.importNode( theadThTemplate.content, true ),\n\t\t\t\t\t  theadTh               = clonedTheadThTemplate.querySelector( 'th' ),\n\t\t\t\t\t  fillDiv               = theadTh.querySelector( '.fill' );\n\n\t\t\t\ttheadTh.setAttribute( 'data-column', columnIndex.toString() );\n\t\t\t\ttheadTh.classList.add( 'hint', 'top' );\n\n\t\t\t\t// add hints\n\t\t\t\thints.forEach( ( hint ) =>\n\t\t\t\t{\n\t\t\t\t\tlet span = document.createElement( 'span' );\n\n\t\t\t\t\tspan.textContent = hint;\n\t\t\t\t\tfillDiv.appendChild( span );\n\t\t\t\t} );\n\n\t\t\t\ttheadThTemplate.parentNode.insertBefore( theadTh, theadThTemplate );\n\t\t\t} );\n\n\n\t\t\t// table rows\n\n\t\t\tthis.puzzle.grid.forEach( ( row, rowKey ) =>\n\t\t\t{\n\t\t\t\tconst cells             = this.puzzle.getRowCells( rowKey ),\n\t\t\t\t\t  clonedRowTemplate = document.importNode( rowTemplate.content, true ),\n\t\t\t\t\t  tr                = clonedRowTemplate.querySelector( 'tr' ),\n\t\t\t\t\t  cellTemplate      = tr.querySelector( '[data-nonogram-puzzle-grid-table-cell]' ),\n\t\t\t\t\t  hintsFillDiv      = tr.querySelector( '[data-row-hints] .fill' )\n\t\t\t\t;\n\n\t\t\t\ttr.setAttribute( 'data-row', rowKey.toString() );\n\n\t\t\t\t// hint cell\n\t\t\t\tthis.puzzle.rowHints[rowKey].forEach( ( hint ) =>\n\t\t\t\t{\n\t\t\t\t\tlet span = document.createElement( 'span' );\n\n\t\t\t\t\tspan.textContent = hint;\n\t\t\t\t\thintsFillDiv.appendChild( span );\n\t\t\t\t} );\n\n\t\t\t\t// grid cells\n\t\t\t\tcells.forEach( ( cell ) =>\n\t\t\t\t{\n\t\t\t\t\tconst clonedCellTemplate = document.importNode( cellTemplate.content, true ),\n\t\t\t\t\t\t  td                 = clonedCellTemplate.querySelector( 'td' )\n\t\t\t\t\t;\n\n\t\t\t\t\ttd.setAttribute( 'data-index', cell.index );\n\t\t\t\t\ttd.setAttribute( 'data-column', cell.column );\n\t\t\t\t\ttd.setAttribute( 'data-row', cell.row );\n\t\t\t\t\ttd.classList.add( 'puzzle-cell', 'flippable' );\n\n\t\t\t\t\tObject.keys( cellClasses ).forEach( ( cssClass ) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (cell.index === cellClasses[cssClass]) {\n\t\t\t\t\t\t\ttd.classList.add( cssClass );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t\ttr.appendChild( td );\n\t\t\t\t} );\n\n\t\t\t\trowTemplate.parentNode.appendChild( tr );\n\t\t\t} );\n\n\n\t\t\t// insert template\n\t\t\tcontainer.innerHtml = container.textContent = '';\n\t\t\tcontainer.appendChild( node );\n\n\t\t\t// set board size\n\t\t\tdocument.querySelector( '[data-nonogram-puzzle-grid-table]' ).classList.add( this.boardSize.handle );\n\n\t\t\tthis._resizeBoardForAvailableScreen();\n\t\t\tthis._makePuzzlePlayable();\n\t\t\tthis.drawPreview( 'userSolution' );\n\t\t} );\n\t}\n\n\n\t/**\n\t *    - draw the game controls ui\n\t */\n\tdrawGameControls()\n\t{\n\t\tPromise.all( this.templatesLoaded ).then( () =>\n\t\t{\n\t\t\tconst template  = this._getTemplate( 'gameControls' ),\n\t\t\t\t  container = document.querySelector( '[data-nonogram-game-controls]' ),\n\t\t\t\t  node      = template.getNode()\n\t\t\t;\n\t\t\tlet fillModeCheckbox;\n\n\n\t\t\tif (!container) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// insert template\n\t\t\tcontainer.innerHtml = container.textContent = '';\n\t\t\tcontainer.appendChild( node );\n\n\t\t\t// add event handlers\n\t\t\tfillModeCheckbox = document.querySelector( '#nonogram-puzzle-fill-mode' );\n\n\t\t\tfillModeCheckbox.addEventListener( 'change', () =>\n\t\t\t{\n\t\t\t\tconst fillModeLabel = document.querySelector( '[for=\"nonogram-puzzle-fill-mode\"]' ),\n\t\t\t\t\t  prevActive    = fillModeLabel.querySelector( '.active' ),\n\t\t\t\t\t  prevInactive  = fillModeLabel.querySelector( '.inactive' )\n\t\t\t\t;\n\n\t\t\t\tprevActive.classList.remove( 'active' );\n\t\t\t\tprevActive.classList.add( 'inactive' );\n\t\t\t\tprevInactive.classList.remove( 'inactive' );\n\t\t\t\tprevInactive.classList.add( 'active' );\n\n\t\t\t\tif (fillModeCheckbox.checked) {\n\t\t\t\t\tfillModeLabel.classList.add( 'on' );\n\t\t\t\t\tthis.playerClickMode = 0;\n\t\t\t\t} else {\n\t\t\t\t\tfillModeLabel.classList.remove( 'on' );\n\t\t\t\t\tthis.playerClickMode = 1;\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\twindow.removeEventListener( 'keyup', Gui._keypressCallback );\n\t\t\twindow.addEventListener( 'keyup', Gui._keypressCallback );\n\t\t} );\n\t}\n\n\n\t/**\n\t * - draw puzzle generating/solving/resetting ui\n\t */\n\tdrawGenerateControls()\n\t{\n\t\tPromise.all( this.templatesLoaded ).then( () =>\n\t\t{\n\t\t\tconst template            = this._getTemplate( 'generateControls' ),\n\t\t\t\t  container           = document.querySelector( '[data-nonogram-generate-controls]' ),\n\t\t\t\t  node                = template.getNode(),\n\t\t\t\t  widthSelect         = node.querySelector( '[data-nonogram-generate-width]' ),\n\t\t\t\t  heightSelect        = node.querySelector( '[data-nonogram-generate-height]' ),\n\t\t\t\t  widthOptions        = node.querySelector( '[data-nonogram-generate-width-options]' ),\n\t\t\t\t  heightOptions       = node.querySelector( '[data-nonogram-generate-height-options]' ),\n\t\t\t\t  chooseExampleSelect = node.querySelector( '[data-nonogram-choose-predefined]' ),\n\t\t\t\t  boardSizeSelect     = node.querySelector( '[data-nonogram-board-size]' ),\n\t\t\t\t  boardSizeOptions    = node.querySelector( '[data-nonogram-board-size-options]' )\n\t\t\t;\n\t\t\tlet i, clonedWidthOptions, cloneHeightOptions, widthOption, heightOption, clonedExampleOptions,\n\t\t\t\texampleOption, chooseSelect, boardSize, clonedSizeOptions, sizeOption, reset, solve, generate;\n\n\n\t\t\tif (!container) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// populate width/height select elements\n\t\t\tfor (i = 5; i <= 30; i++) {\n\n\t\t\t\tclonedWidthOptions       = document.importNode( widthOptions.content, true );\n\t\t\t\tcloneHeightOptions       = document.importNode( heightOptions.content, true );\n\t\t\t\twidthOption              = clonedWidthOptions.querySelector( 'option' );\n\t\t\t\twidthOption.textContent  = widthOption.value = i;\n\t\t\t\theightOption             = cloneHeightOptions.querySelector( 'option' );\n\t\t\t\theightOption.textContent = heightOption.value = i;\n\n\t\t\t\tif (this.puzzle.width === i) {\n\t\t\t\t\twidthOption.setAttribute( 'selected', 'selected' );\n\t\t\t\t}\n\t\t\t\tif (this.puzzle.height === i) {\n\t\t\t\t\theightOption.setAttribute( 'selected', 'selected' );\n\t\t\t\t}\n\n\t\t\t\twidthSelect.appendChild( widthOption );\n\t\t\t\theightSelect.appendChild( heightOption );\n\t\t\t}\n\n\t\t\t// populate predefined puzzles\n\n\t\t\tObject.keys( PuzzleLibrary ).forEach( ( puzzleName ) =>\n\t\t\t{\n\t\t\t\tclonedExampleOptions = document.importNode( widthOptions.content, true );\n\t\t\t\texampleOption        = clonedExampleOptions.querySelector( 'option' );\n\n\t\t\t\texampleOption.textContent = exampleOption.value = puzzleName;\n\n\t\t\t\tif (puzzleName === this.selectedExample) {\n\t\t\t\t\texampleOption.setAttribute( 'selected', 'selected' );\n\t\t\t\t}\n\n\t\t\t\tchooseExampleSelect.appendChild( exampleOption );\n\t\t\t} );\n\n\t\t\t// populate board size\n\t\t\tthis.boardSizes.forEach( ( sizeObj ) =>\n\t\t\t{\n\t\t\t\tclonedSizeOptions = document.importNode( boardSizeOptions.content, true );\n\t\t\t\tsizeOption        = clonedSizeOptions.querySelector( 'option' );\n\n\t\t\t\tsizeOption.value       = sizeObj.handle;\n\t\t\t\tsizeOption.textContent = sizeObj.name;\n\n\n\t\t\t\tif (sizeObj.handle === this.boardSize.handle) {\n\t\t\t\t\tsizeOption.setAttribute( 'selected', 'selected' );\n\t\t\t\t}\n\n\t\t\t\tboardSizeSelect.appendChild( sizeOption );\n\t\t\t} );\n\n\t\t\t// insert template\n\t\t\tcontainer.innerHtml = container.textContent = '';\n\t\t\tcontainer.appendChild( node );\n\n\t\t\t// add event handlers\n\t\t\tgenerate     = document.querySelector( '[data-nonogram-generate-button]' );\n\t\t\tchooseSelect = document.querySelector( '[data-nonogram-choose-predefined]' );\n\t\t\tboardSize    = document.querySelector( '[data-nonogram-board-size]' );\n\t\t\treset        = document.querySelector( '[data-nonogram-game-reset]' );\n\t\t\tsolve        = document.querySelector( '[data-nonogram-game-solve]' );\n\n\t\t\tgenerate.addEventListener( 'click', () =>\n\t\t\t{\n\t\t\t\tconst widthSelect    = document.querySelector( '[data-nonogram-generate-width]' ),\n\t\t\t\t\t  heightSelect   = document.querySelector( '[data-nonogram-generate-height]' ),\n\t\t\t\t\t  width          = widthSelect.value,\n\t\t\t\t\t  height         = heightSelect.value,\n\t\t\t\t\t  creator        = new Creator(),\n\t\t\t\t\t  puzzle         = creator.createRandom( width, height, null )\n\t\t\t\t;\n\t\t\t\tthis.selectedExample = null;\n\t\t\t\tthis.draw( puzzle );\n\t\t\t\tthis._resizeBoardForAvailableScreen();\n\t\t\t} );\n\n\t\t\tchooseSelect.addEventListener( 'change', () =>\n\t\t\t{\n\t\t\t\tconst creator = new Creator();\n\t\t\t\tlet puzzleDef, puzzle;\n\n\t\t\t\tif (chooseSelect.value !== '') {\n\t\t\t\t\tObject.keys( PuzzleLibrary ).forEach( ( puzzleName ) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (chooseSelect.value === puzzleName) {\n\n\t\t\t\t\t\t\tpuzzleDef            = PuzzleLibrary[puzzleName];\n\t\t\t\t\t\t\tthis.selectedExample = puzzleName;\n\n\t\t\t\t\t\t\tif (puzzleDef.solutionGrid) {\n\t\t\t\t\t\t\t\tpuzzle = creator.createFromGrid( puzzleDef.solutionGrid );\n\t\t\t\t\t\t\t} else if (puzzleDef.hints) {\n\t\t\t\t\t\t\t\tpuzzle = creator.createFromHints( puzzleDef.hints );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t\tif (puzzle) {\n\t\t\t\t\t\tthis.draw( puzzle );\n\t\t\t\t\t\tthis._resizeBoardForAvailableScreen();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tboardSize.addEventListener( 'change', () =>\n\t\t\t{\n\t\t\t\tthis.boardSizes.forEach( ( item ) =>\n\t\t\t\t{\n\t\t\t\t\tif (item.handle === boardSize.value) {\n\t\t\t\t\t\tthis._changeBoardSize( item );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\treset.addEventListener( 'click', () =>\n\t\t\t{\n\t\t\t\tthis._resetPuzzle();\n\t\t\t} );\n\n\t\t\tsolve.addEventListener( 'click', () =>\n\t\t\t{\n\t\t\t\tthis.drawSolution();\n\t\t\t\tthis.drawPreview( 'solution' );\n\t\t\t\tthis._showPuzzleSolved();\n\t\t\t} );\n\t\t} );\n\t}\n\n\n\t/**\n\t * - draw the console and populate with Creator _log\n\t */\n\tdrawConsole()\n\t{\n\t\tPromise.all( this.templatesLoaded ).then( () =>\n\t\t{\n\t\t\tconst template  = this._getTemplate( 'console' ),\n\t\t\t\t  container = document.querySelector( '[data-nonogram-console]' ),\n\t\t\t\t  node      = template.getNode(),\n\t\t\t\t  output    = node.querySelector( '[data-nonogram-console-output]' ),\n\t\t\t\t  line      = node.querySelector( '[data-nonogram-console-line]' )\n\t\t\t;\n\n\t\t\tif (!container) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.puzzle.creator instanceof Creator) {\n\t\t\t\tthis.puzzle.creator.log.forEach( ( text ) =>\n\t\t\t\t{\n\t\t\t\t\tconst clonedLine = document.importNode( line.content, true ),\n\t\t\t\t\t\t  code       = clonedLine.querySelector( 'code' );\n\n\t\t\t\t\tcode.textContent = text.toString();\n\t\t\t\t\toutput.appendChild( code );\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// insert template\n\t\t\tcontainer.innerHtml = container.textContent = '';\n\t\t\tcontainer.appendChild( node );\n\t\t} );\n\t}\n\n\n\t/**\n\t * - draw the preview grid for the current state of the puzzle\n\t *\n\t * @param solutionType\n\t */\n\tdrawPreview( solutionType )\n\t{\n\t\tPromise.all( this.templatesLoaded ).then( () =>\n\t\t{\n\t\t\tconst template  = this._getTemplate( 'previewGrid' ),\n\t\t\t\t  container = document.querySelector( '[data-nonogram-preview-grid]' ),\n\t\t\t\t  node      = template.getNode()\n\t\t\t;\n\n\t\t\t// insert template\n\n\t\t\tcontainer.innerHtml = container.textContent = '';\n\t\t\tcontainer.appendChild( node.querySelector( '[data-nonogram-preview]' ) );\n\n\n\t\t\t// draw preview canvas\n\n\t\t\tconst canvas          = document.querySelector( '[data-nonogram-preview-canvas]' ),\n\t\t\t\t  ctx             = canvas.getContext( '2d' ),\n\t\t\t\t  parentContainer = canvas.parentElement.parentElement.parentElement,\n\t\t\t\t  parentWidth     = parentContainer.offsetWidth,\n\t\t\t\t  parentHeight    = parentContainer.offsetHeight,\n\t\t\t\t  containerRatio  = parentWidth / parentHeight,\n\t\t\t\t  puzzleRatio     = this.puzzle.width / this.puzzle.height\n\t\t\t;\n\t\t\tlet cellSize;\n\n\t\t\tif (containerRatio > puzzleRatio) {\n\t\t\t\tcellSize = Math.floor( parentHeight / this.puzzle.height );\n\t\t\t} else {\n\t\t\t\tcellSize = Math.floor( parentWidth / this.puzzle.width );\n\t\t\t}\n\n\t\t\tcanvas.width  = cellSize * this.puzzle.width;\n\t\t\tcanvas.height = cellSize * this.puzzle.height;\n\n\t\t\tthis.puzzle.cells.forEach( ( cell ) =>\n\t\t\t{\n\t\t\t\tif (cell[solutionType] === 1) {\n\t\t\t\t\tctx.fillRect( cell.column * cellSize, cell.row * cellSize, cellSize, cellSize );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\n\t/**\n\t * - draw the solution to the current puzzle\n\t */\n\tdrawSolution()\n\t{\n\t\tPromise.all( this.templatesLoaded ).then( () =>\n\t\t{\n\t\t\tconst filledTds = this.gridContainer.querySelectorAll( 'td.filled' );\n\n\n\t\t\tfilledTds.forEach( ( td ) =>\n\t\t\t{\n\t\t\t\ttd.classList.remove( 'filled', 'solution-positive', 'solution-negative', 'user-positive', 'user-negative', 'flipped' );\n\t\t\t} );\n\n\t\t\tthis.puzzle.cells.forEach( ( cell ) =>\n\t\t\t{\n\t\t\t\tconst cellElem = this.gridContainer.querySelector( 'td[data-index=\"' + cell.index + '\"]' );\n\n\t\t\t\tcell.userSolution = cell.solution;\n\t\t\t\tcellElem.classList.add( 'user-solved' );\n\n\t\t\t\tif (cell.solution === 1) {\n\t\t\t\t\tcellElem.classList.add( 'solution-positive', 'user-positive', 'flipped' );\n\t\t\t\t} else {\n\t\t\t\t\tcellElem.classList.add( 'solution-negative', 'user-negative' );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\n\t// ######################################################################################\tprivate methods\n\n\n\t/**\n\t *\n\t * @param {object} boardSize\n\t * @private\n\t */\n\t_changeBoardSize( boardSize )\n\t{\n\t\tconst puzzleTable = document.querySelector( '[data-nonogram-puzzle-grid-table]' ),\n\t\t\t  sizeSelect  = document.querySelector( '[data-nonogram-board-size]' )\n\t\t;\n\n\t\tif (puzzleTable && sizeSelect) {\n\n\t\t\tpuzzleTable.classList.remove( 'tiny', 'small', 'medium', 'large' );\n\t\t\tpuzzleTable.classList.add( boardSize.handle );\n\t\t\tsizeSelect.value = boardSize.handle;\n\n\t\t\tthis.boardSize = boardSize;\n\n\t\t\tthis.drawPreview();\n\t\t}\n\t}\n\n\n\t/**\n\t *\n\t * @private\n\t */\n\t_resizeBoardForAvailableScreen()\n\t{\n\t\tconst table            = this.gridContainer.querySelector( '.nonogram-puzzle-grid' ),\n\t\t\t  availableWidth   = this.gridContainer.clientWidth,\n\t\t\t  sortedBoardSizes = this.boardSizes.sort( ( a, b ) =>\n\t\t\t  {\n\t\t\t\t  return a.size > b.size ? -1 : 1;\n\t\t\t  } )\n\t\t;\n\t\tlet i;\n\n\n\t\tif (table.clientWidth > availableWidth) {\n\n\t\t\tfor (i = 0; i < sortedBoardSizes.length; i++) {\n\n\t\t\t\tif (sortedBoardSizes[i].size < this.boardSize.size) {\n\n\t\t\t\t\tthis._changeBoardSize( sortedBoardSizes[i] );\n\t\t\t\t}\n\n\t\t\t\tif (table.clientWidth <= availableWidth) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.drawConsole();\n\t}\n\n\n\t/**\n\t *\n\t * @private\n\t */\n\t_makePuzzlePlayable()\n\t{\n\t\tconst table    = this.gridContainer.querySelector( '.nonogram-puzzle-grid' ),\n\t\t\t  cells    = this.gridContainer.querySelectorAll( '.nonogram-puzzle-grid td.puzzle-cell' ),\n\t\t\t  allCells = this.gridContainer.querySelectorAll( '.nonogram-puzzle-grid td' )\n\t\t;\n\n\t\tthis.playerClickMode = 1;\n\n\t\t// set css classes and event handlers for puzzle cells\n\n\t\tcells.forEach( ( cellElem ) =>\n\t\t{\n\t\t\tcellElem.classList.add( 'playable' );\n\n\t\t\t// highlight row/column on mouse hover\n\n\t\t\tcellElem.addEventListener( 'mouseenter', ( e ) =>\n\t\t\t{\n\t\t\t\tconst hoverCell = e.currentTarget,\n\t\t\t\t\t  row       = hoverCell.getAttribute( 'data-row' ),\n\t\t\t\t\t  column    = hoverCell.getAttribute( 'data-column' )\n\t\t\t\t;\n\n\t\t\t\tallCells.forEach( ( cellElem ) =>\n\t\t\t\t{\n\t\t\t\t\tif (cellElem.getAttribute( 'data-row' ) === row || cellElem.getAttribute( 'data-column' ) === column) {\n\t\t\t\t\t\tcellElem.classList.add( 'row-column-highlight' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcellElem.classList.remove( 'row-column-highlight' );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\t// add cell click event handler\n\n\t\t\tcellElem.addEventListener( 'click', ( e ) =>\n\t\t\t{\n\t\t\t\tconst cellElem  = e.currentTarget,\n\t\t\t\t\t  cellIndex = cellElem.getAttribute( 'data-index' ),\n\t\t\t\t\t  cell      = this.puzzle.getCellByIndex( cellIndex ),\n\t\t\t\t\t  solvedP   = document.querySelector( '[data-nonogram-puzzle-grid-solved]' )\n\t\t\t\t;\n\n\t\t\t\te.preventDefault();\n\n\t\t\t\tcell.userSolution = cell.userSolution === this.playerClickMode ? null : this.playerClickMode;\n\n\t\t\t\ttable.classList.remove( 'solved' );\n\t\t\t\tcellElem.classList.remove( 'user-solved', 'user-positive', 'user-negative', 'solution-positive', 'solution-negative' );\n\n\t\t\t\tif (cell.userSolution === 1) {\n\t\t\t\t\tcellElem.classList.add( 'user-solved', 'user-positive' );\n\t\t\t\t} else if (cell.userSolution === 0) {\n\t\t\t\t\tcellElem.classList.add( 'user-solved', 'user-negative' );\n\t\t\t\t}\n\n\t\t\t\tcellElem.classList.toggle( 'flipped' );\n\n\t\t\t\tthis.drawPreview( 'userSolution' );\n\n\t\t\t\tif (this.puzzle.checkUserSolution()) {\n\t\t\t\t\tthis._showPuzzleSolved();\n\t\t\t\t} else {\n\t\t\t\t\tsolvedP.textContent = '';\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\n\t\t// remove highlighted cells on puzzle grid mouseout\n\n\t\ttable.addEventListener( 'mouseleave', () =>\n\t\t{\n\t\t\tallCells.forEach( ( cellElem ) =>\n\t\t\t{\n\t\t\t\tcellElem.classList.remove( 'row-column-highlight' );\n\t\t\t} );\n\t\t} );\n\t}\n\n\n\t/**\n\t *\n\t * @private\n\t */\n\t_resetPuzzle()\n\t{\n\t\tconst cellElements = this.gridContainer.querySelectorAll( '.nonogram-puzzle-grid td.puzzle-cell' ),\n\t\t\t  puzzleGrid   = this.gridContainer.querySelector( '.nonogram-puzzle-grid' ),\n\t\t\t  solvedP      = document.querySelector( '[data-nonogram-puzzle-grid-solved]' )\n\t\t;\n\n\t\tpuzzleGrid.classList.remove( 'solved' );\n\t\tsolvedP.textContent = '';\n\n\t\tthis.puzzle.cells.forEach( ( cell ) =>\n\t\t{\n\t\t\tcell.userSolution = null;\n\t\t} );\n\n\t\tcellElements.forEach( ( cellElem ) =>\n\t\t{\n\t\t\tcellElem.classList.remove( 'user-solved', 'user-positive', 'user-negative', 'solution-positive', 'solution-negative' );\n\t\t} );\n\n\t\tthis.gridContainer.querySelector( '[data-nonogram-preview-grid]' ).innerHTML = '';\n\n\t\tthis.drawPreview( 'userSolution' );\n\t}\n\n\n\t/**\n\t *\n\t * @private\n\t */\n\t_showPuzzleSolved()\n\t{\n\t\tconst grid       = this.gridContainer.querySelector( '.nonogram-puzzle-grid' ),\n\t\t\t  tableCells = document.querySelectorAll( '[data-nonogram-puzzle-grid-table] .puzzle-cell' ),\n\t\t\t  solvedP    = document.querySelector( '[data-nonogram-puzzle-grid-solved]' )\n\t\t;\n\n\t\ttableCells.forEach( ( cellElem ) =>\n\t\t{\n\t\t\tcellElem.classList.remove( 'row-column-highlight' )\n\t\t} );\n\n\t\tgrid.classList.add( 'solved' );\n\t\tsolvedP.textContent = 'Solved!';\n\t}\n\n\n\t/**\n\t *\n\t * @param name\n\t * @returns {GuiTemplate}\n\t * @throws - error if template could not be found\n\t * @private\n\t */\n\t_getTemplate( name )\n\t{\n\t\tconst ret = this.templates.find( ( template ) =>\n\t\t{\n\t\t\treturn template.name === name;\n\t\t} );\n\n\t\tif (!(ret instanceof GuiTemplate)) {\n\t\t\tthrow '\"' + name + '\" template not found.';\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\n\t/**\n\t * handle window keypress events\n\t *\n\t * @param {KeyboardEvent} e\n\t * @private\n\t */\n\tstatic _keypressCallback( e )\n\t{\n\t\tif (e.key && e.key === 'x') {\n\t\t\tdocument.querySelector( '#nonogram-puzzle-fill-mode' ).dispatchEvent( new MouseEvent( 'click' ) );\n\t\t}\n\t}\n\n\n};\n\n\n\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Utility","_classCallCheck","array","index","indexOf","splice","length","Array","fill","slice","min","max","minCeil","Math","ceil","maxFloor","floor","random","Puzzle","width","height","toString","this","parseInt","totalCells","reset","_this","zeroFill","getZeroFilledArray","creator","cells","rowHints","columnHints","grid","map","every","cell","userValue","userSolution","solution","row","i","start","end","push","column","indexInt","PuzzleCell","params","aiSolution","assign","PuzzleLine","type","minimumSectionLength","sections","solved","Solver","puzzle","_reset","passStart","passElapsedTime","totalElapsedTime","lineKey","line","Date","getTime","lastProgress","pass","isReset","_log","_getProgress","_getTotalSolved","lines","eliminateImpossibleFits","findKnownPositivesAndNegatives","findSectionDefiningChains","findAnchoredSections","findCompletedSections","findCompletedLines","elapsedTime","section","possibleStartIndex","newPossibleStartIndexes","lineSectionKey","startIndexKey","testCell","lineCellKey","minimumStartIndex","maximumStartIndex","_setCellSolution","cloneArray","possibleStartIndexes","removeFromArray","sectionKey","cellCounts","cellCountKey","cellCount","totalCellCounts","fillRange","firstSection","lastSection","cellKey","chain","chainKey","firstSortedSection","chains","lastValue","sort","a","b","firstNegative","lastNegative","totalSectionLength","totalPositiveSolved","rowNumber","rowCells","len","columnKey","columnHint","possibleRowIndexes","possibleColumnIndexes","solutionLog","getRowCells","knownIndexes","getColumnCells","puzzleCell","isRow","isCol","cellsSolved","html","cssClass","total","maxPossibilities","totalPossibilities","Creator","rowKey","currentVal","lastVal","hintKey","hint","density","cellsFilled","chanceOfCellFill","solutionGrid","rowArray","cellValue","solver","elapsed","puzzleValid","densityValid","getRandomIntBetween","_populatePuzzleFromGrid","solve","_logLine","creationTime","solvingTime","forEach","hints","_typeof","solvedCell","cellIndex","getCellByIndex","msg","log","GuiTemplate","name","path","onLoadedCallbacks","isLoaded","loadedPromise","callback","Promise","resolve","fetch","then","response","ok","text","fireOnLoaded","div","document","createElement","innerHTML","PuzzleLibrary","Gui","themePath","head","querySelector","link","boardSizes","handle","size","boardSize","themeStylesheetPath","rel","href","prepend","templatesLoaded","themeTemplatesPath","templates","template","load","e","dispatchEvent","MouseEvent","_this2","all","drawGenerateControls","drawPuzzle","drawGameControls","drawConsole","_this3","_getTemplate","gridContainer","container","node","getNode","theadThTemplate","rowTemplate","cellClasses","tl","tr","bl","br","columnIndex","theadTh","importNode","content","fillDiv","setAttribute","classList","add","span","textContent","appendChild","parentNode","insertBefore","cellTemplate","hintsFillDiv","td","keys","innerHtml","_resizeBoardForAvailableScreen","_makePuzzlePlayable","drawPreview","_this4","fillModeCheckbox","addEventListener","fillModeLabel","prevActive","prevInactive","remove","checked","playerClickMode","window","removeEventListener","_keypressCallback","_this5","clonedWidthOptions","cloneHeightOptions","widthOption","heightOption","clonedExampleOptions","exampleOption","chooseSelect","clonedSizeOptions","sizeOption","generate","widthSelect","heightSelect","widthOptions","heightOptions","chooseExampleSelect","boardSizeSelect","boardSizeOptions","puzzleName","selectedExample","sizeObj","createRandom","draw","puzzleDef","createFromGrid","createFromHints","item","_changeBoardSize","_resetPuzzle","drawSolution","_showPuzzleSolved","_this6","output","code","solutionType","_this7","cellSize","canvas","ctx","getContext","parentContainer","parentElement","parentWidth","offsetWidth","parentHeight","offsetHeight","containerRatio","puzzleRatio","fillRect","_this8","querySelectorAll","cellElem","puzzleTable","sizeSelect","table","availableWidth","clientWidth","sortedBoardSizes","_this9","allCells","hoverCell","currentTarget","getAttribute","solvedP","preventDefault","toggle","checkUserSolution","cellElements","puzzleGrid","tableCells","ret","find"],"sourceRoot":""}